// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using newsletter_form_api.Dal;

#nullable disable

namespace newsletter_form_api.Migrations
{
    [DbContext(typeof(NewsletterDbContext))]
    [Migration("20250510123348_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommunicationPreferenceSubscriber", b =>
                {
                    b.Property<int>("CommunicationPreferencesId")
                        .HasColumnType("integer");

                    b.Property<int>("SubscribersId")
                        .HasColumnType("integer");

                    b.HasKey("CommunicationPreferencesId", "SubscribersId");

                    b.HasIndex("SubscribersId");

                    b.ToTable("SubscriberCommunicationPreferences", (string)null);
                });

            modelBuilder.Entity("InterestSubscriber", b =>
                {
                    b.Property<int>("InterestsId")
                        .HasColumnType("integer");

                    b.Property<int>("SubscribersId")
                        .HasColumnType("integer");

                    b.HasKey("InterestsId", "SubscribersId");

                    b.HasIndex("SubscribersId");

                    b.ToTable("SubscriberInterests", (string)null);
                });

            modelBuilder.Entity("newsletter_form_api.Dal.Entities.CommunicationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CommunicationPreferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 10, 12, 33, 48, 58, DateTimeKind.Utc).AddTicks(977),
                            IsDeleted = false,
                            Tag = "Email"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 10, 12, 33, 48, 58, DateTimeKind.Utc).AddTicks(978),
                            IsDeleted = false,
                            Tag = "SMS"
                        });
                });

            modelBuilder.Entity("newsletter_form_api.Dal.Entities.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 10, 12, 33, 48, 58, DateTimeKind.Utc).AddTicks(882),
                            IsDeleted = false,
                            Name = "Houses"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 10, 12, 33, 48, 58, DateTimeKind.Utc).AddTicks(885),
                            IsDeleted = false,
                            Name = "Apartments"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 10, 12, 33, 48, 58, DateTimeKind.Utc).AddTicks(886),
                            IsDeleted = false,
                            Name = "Shared ownership"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 10, 12, 33, 48, 58, DateTimeKind.Utc).AddTicks(886),
                            IsDeleted = false,
                            Name = "Rental"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 10, 12, 33, 48, 58, DateTimeKind.Utc).AddTicks(887),
                            IsDeleted = false,
                            Name = "Land sourcing"
                        });
                });

            modelBuilder.Entity("newsletter_form_api.Dal.Entities.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("CommunicationPreferenceSubscriber", b =>
                {
                    b.HasOne("newsletter_form_api.Dal.Entities.CommunicationPreference", null)
                        .WithMany()
                        .HasForeignKey("CommunicationPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("newsletter_form_api.Dal.Entities.Subscriber", null)
                        .WithMany()
                        .HasForeignKey("SubscribersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterestSubscriber", b =>
                {
                    b.HasOne("newsletter_form_api.Dal.Entities.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("newsletter_form_api.Dal.Entities.Subscriber", null)
                        .WithMany()
                        .HasForeignKey("SubscribersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
